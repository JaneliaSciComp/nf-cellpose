{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "https://raw.githubusercontent.com/JaneliaSciComp/nf-cellpose/main/nextflow_schema.json",
    "title": "JaneliaSciComp/nf-cellpose pipeline parameters",
    "description": "Cellpose segmentation pipeline",
    "type": "object",
    "$defs": {
        "input_output_options": {
            "title": "Input/output options",
            "type": "object",
            "fa_icon": "fas fa-terminal",
            "description": "Define where the pipeline should find input data and save output data.",
            "required": ["input", "outdir"],
            "properties": {
                "input": {
                    "type": "string",
                    "description": "Input data location. It can be either a file or a directory.",
                    "help_text": "Path to the input data.",
                    "fa_icon": "fas fa-folder-open"
                },
                "input_pattern": {
                    "type": "string",
                    "description": "Input data glob pattern. If the input is a directory it process the segmentation on all files/dirs that match the pattern."
                },
                "input_subpath": {
                    "type": "string",
                    "description": "Specifies the input dataset if the input is a ZARR/N5/HDF5 container"
                },
                "outdir": {
                    "type": "string",
                    "format": "directory-path",
                    "description": "The output directory where the results will be saved. You have to use absolute paths to storage on Cloud infrastructure.",
                    "fa_icon": "fas fa-folder-open"
                },
                "labels_container_suffix": {
                    "type": "string",
                    "description": "Suffix appended to the input container to create the labels container name."
                },
                "labels_container_ext": {
                    "type": "string",
                    "description": "Labels container extension. This could be used to save the labels as tiff when the input is a zarr container, or vice-versa."
                },
                "labels_group": {
                    "type": "string",
                    "description": "If the output is a ZARR/N5/HDF5 container, specifies the output labels group"
                },
                "email": {
                    "type": "string",
                    "description": "Email address for completion summary.",
                    "fa_icon": "fas fa-envelope",
                    "help_text": "Set this parameter to your e-mail address to get a summary e-mail with details of the run sent to you when the workflow exits. If set in your user config file (`~/.nextflow/config`) then you don't need to specify this on the command line for every run.",
                    "pattern": "^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$"
                }
            }
        },
        "institutional_config_options": {
            "title": "Institutional config options",
            "type": "object",
            "fa_icon": "fas fa-university",
            "description": "Parameters used to describe centralised config profiles. These should not be edited.",
            "help_text": "The centralised nf-core configuration profiles use a handful of pipeline parameters to describe themselves. This information is then printed to the Nextflow log when you run a pipeline. You should not need to change these values when you run a pipeline.",
            "properties": {
                "custom_config_version": {
                    "type": "string",
                    "description": "Git commit id for Institutional configs.",
                    "default": "master",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "custom_config_base": {
                    "type": "string",
                    "description": "Base directory for Institutional configs.",
                    "default": "https://raw.githubusercontent.com/nf-core/configs/master",
                    "hidden": true,
                    "help_text": "If you're running offline, Nextflow will not be able to fetch the institutional config files from the internet. If you don't need them, then this is not a problem. If you do need them, you should download the files from the repo and tell Nextflow where to find them with this parameter.",
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_name": {
                    "type": "string",
                    "description": "Institutional config name.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_description": {
                    "type": "string",
                    "description": "Institutional config description.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_contact": {
                    "type": "string",
                    "description": "Institutional config contact information.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_url": {
                    "type": "string",
                    "description": "Institutional config URL link.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "lsf_opts": {
                    "type": "string",
                    "description": "Default LSF cluster options",
                    "hidden": true
                }
            }
        },
        "segmentation_options": {
            "title": "Segmentation options",
            "type": "object",
            "description": "",
            "default": "",
            "properties": {
                "cellpose_model": {
                    "type": "string",
                    "description": "Name of the cellpose model. If it's a full path the model is looked up in the corresponding location otherwise it uses cellpose_models_dir",
                    "default": "cpsam"
                },
                "cellpose_models_dir": {
                    "type": "string",
                    "description": "Location of the cellpose models"
                },
                "cellpose_log_config": {
                    "type": "string",
                    "description": "Cellpose log configuration."
                },
                "z_axis": {
                    "type": "string",
                    "description": "Z axis index. This is the Z axis index after the timepoint dimension had been removed.",
                    "default": "1"
                },
                "channel_axis": {
                    "type": "string",
                    "description": "Channel axis index. This is the channel axis index after the timepoint dimension had been removed. If this is not set cellpose will automatically use the last axis (-1) as the channel.",
                    "default": "1"
                },
                "anisotropy": {
                    "type": "number",
                    "description": "Data anisotropy. If this is not provided - it will be computed from voxel spacing.",
                    "default": 1
                },
                "voxel_spacing": {
                    "type": "string",
                    "description": "Voxel spacing. If the input is a zarr container this is read from zarr attributes."
                },
                "expansion_factor": {
                    "type": "number",
                    "description": "Data expansion factor",
                    "default": 1
                },
                "timeindex": {
                    "type": "number",
                    "description": "Timepoint axis",
                    "default": 0,
                    "hidden": true
                },
                "cellpose_cpus": {
                    "type": "number",
                    "description": "CPU(s) allocated for the cellpose driver",
                    "default": 1
                },
                "cellpose_mem_gb": {
                    "type": "number",
                    "description": "Memory in GB allocated for the cellpose driver. If the the memory is computed using default_mem_gb_per_cpu*cellpose_cpus",
                    "default": 0
                },
                "input_channels": {
                    "type": "string",
                    "description": "Comma delimited list of 0-based channels used for segmentation.",
                    "default": "1"
                },
                "process_blocksize": {
                    "type": "string",
                    "description": "Define spatial block partitioning for distributing the work to a Dask cluster. Even for 4 or 5-dimensional arrays this only needs to specify the block partitioning in the 3D spatial dimensions only",
                    "default": "128,128,128"
                },
                "local_workers": {
                    "type": "integer",
                    "description": "Even when with_dask parameter is false, cellpose can still distribute the work to a local cluster if process_blocksize is defined. In that case this argument specifies the number of local workers to be used.",
                    "default": 1
                },
                "blocks_overlap": {
                    "type": "string",
                    "description": "Blocks overlap used for distributed processing"
                },
                "gpu_device": {
                    "type": "string",
                    "description": "which gpu device to use"
                },
                "do_3D": {
                    "type": "boolean",
                    "description": "Perform 3D segmentation",
                    "default": true,
                    "hidden": true
                },
                "use_gpu": {
                    "type": "boolean",
                    "description": "Whether to use GPU or not (cpsam is extremely slow if GPU is not used)",
                    "default": true,
                    "hidden": true
                },
                "skip_normalize": {
                    "type": "boolean",
                    "description": "Flag to skip normalization - not recommended for 3D",
                    "default": false,
                    "hidden": true
                },
                "norm_percentile": {
                    "type": "string",
                    "description": "low and high percentile for normalization",
                    "default": "1 99"
                },
                "stitch_threshold": {
                    "type": "integer",
                    "description": "cellpose stitch_threshold parameter",
                    "default": 0
                },
                "cellprob_threshold": {
                    "type": "integer",
                    "description": "cellpose cellprob_threshold parameter",
                    "default": 1
                },
                "flow3D_smooth": {
                    "type": "integer",
                    "description": "cellpose flow3D_smooth parameter",
                    "default": 1
                },
                "cell_diameter": {
                    "type": "integer",
                    "description": "cell diameter",
                    "default": 0
                },
                "min_size": {
                    "type": "integer",
                    "description": "cell minimum size",
                    "default": 15
                },
                "merge_labels_distance_th": {
                    "type": "integer",
                    "default": 1,
                    "description": "Distance threshold for merging labels across blocks when distributed cellppose is used.",
                    "hidden": true
                },
                "preprocessing_steps": {
                    "type": "string",
                    "description": "Comma delimited step names to run for block preprocessing.",
                    "hidden": true
                },
                "preprocessing_config": {
                    "type": "string",
                    "description": "Preprocessing YAML config  file.  This contains preprocessing steps configuration.",
                    "hidden": true
                },
                "verbose": {
                    "type": "boolean",
                    "description": "Log verbosity"
                },
                "cellpose_runtime_opts": {
                    "type": "string",
                    "description": "When cellpose is not distributed on a Dask cluster - it requires GPU. This can be used to enable GPU access for the cellpose container runtime"
                },
                "cellpose_cluster_opts": {
                    "type": "string",
                    "description": "When cellpose is not distributed on a Dask cluster - it requires GPU. This can be used to dispatch the cellpose job to a GPU node"
                }
            }
        },
        "multiscale_options": {
            "title": "Multiscale options",
            "type": "object",
            "description": "",
            "default": "",
            "properties": {
                "skip_multiscale": {
                    "type": "boolean",
                    "description": "If true skip generating multiscale pyramid for segmented images"
                },
                "multiscale_cpus": {
                    "type": "integer",
                    "default": 1,
                    "description": "Number of cpus for multiscale"
                },
                "multiscale_mem_gb": {
                    "type": "integer",
                    "description": "Memory resource in GB for multiscale",
                    "default": 0
                }
            }
        },
        "distributed_processing_options": {
            "title": "Distributed processing (Dask) options",
            "type": "object",
            "description": "Distributed processing options",
            "default": "",
            "properties": {
                "with_dask": {
                    "type": "boolean",
                    "description": "Use a distributed Dask cluster for the segmentation"
                },
                "dask_config": {
                    "type": "string",
                    "description": "Dask configuration file",
                    "default": "${projectDir}/conf/dask_config.yml"
                },
                "dask_workers": {
                    "type": "integer",
                    "description": "Number of cellpose dask workers",
                    "default": 1
                },
                "dask_min_workers": {
                    "type": "integer",
                    "description": "Number of minimum cellpose dask workers that need to be available before the work starts.",
                    "default": 1
                },
                "dask_scheduler_port": {
                    "type": "integer",
                    "description": "Port used by the dask scheduler.",
                    "default": 0
                },
                "dask_dashboard_port": {
                    "type": "integer",
                    "description": "Port used by the dask dashboard.",
                    "default": 0
                },
                "dask_worker_cpus": {
                    "type": "number",
                    "description": "CPU(s) allocated for the cellpose dask worker",
                    "default": 1
                },
                "dask_worker_mem_gb": {
                    "type": "number",
                    "description": "Memory in GB allocated for the cellpose dask worker. If the the memory is computed using default_mem_gb_per_cpu*dask_worker_cpus",
                    "default": 0
                },
                "dask_worker_runtime_opts": {
                    "type": "string",
                    "description": "Runtime container for running dask workers. This is needed for example for apptainer or singularity to set the '--nv' flag"
                },
                "dask_worker_cluster_opts": {
                    "type": "string",
                    "description": "Cluster options for running dask workers or a GPU queue."
                }
            }
        },
        "generic_options": {
            "title": "Generic options",
            "type": "object",
            "fa_icon": "fas fa-file-import",
            "description": "Less common options for the pipeline, typically set in a config file.",
            "help_text": "These options are common to all nf-core pipelines and allow you to customise some of the core preferences for how the pipeline runs.\n\nTypically these options would be set in a Nextflow config file loaded for all pipeline runs, such as `~/.nextflow/config`.",
            "properties": {
                "version": {
                    "type": "boolean",
                    "description": "Display version and exit.",
                    "fa_icon": "fas fa-question-circle",
                    "hidden": true
                },
                "publish_dir_mode": {
                    "type": "string",
                    "default": "copy",
                    "description": "Method used to save pipeline results to output directory.",
                    "help_text": "The Nextflow `publishDir` option specifies which intermediate files should be saved to the output directory. This option tells the pipeline what method should be used to move these files. See [Nextflow docs](https://www.nextflow.io/docs/latest/process.html#publishdir) for details.",
                    "fa_icon": "fas fa-copy",
                    "enum": ["symlink", "rellink", "link", "copy", "copyNoFollow", "move"],
                    "hidden": true
                },
                "email_on_fail": {
                    "type": "string",
                    "description": "Email address for completion summary, only when pipeline fails.",
                    "fa_icon": "fas fa-exclamation-triangle",
                    "pattern": "^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$",
                    "help_text": "An email address to send a summary email to when the pipeline is completed - ONLY sent if the pipeline does not exit successfully.",
                    "hidden": true
                },
                "plaintext_email": {
                    "type": "boolean",
                    "description": "Send plain-text email instead of HTML.",
                    "fa_icon": "fas fa-remove-format",
                    "hidden": true
                },
                "monochrome_logs": {
                    "type": "boolean",
                    "description": "Do not use coloured log outputs.",
                    "fa_icon": "fas fa-palette",
                    "hidden": true
                },
                "hook_url": {
                    "type": "string",
                    "description": "Incoming hook URL for messaging service",
                    "fa_icon": "fas fa-people-group",
                    "help_text": "Incoming hook URL for messaging service. Currently, MS Teams and Slack are supported.",
                    "hidden": true
                },
                "validate_params": {
                    "type": "boolean",
                    "description": "Boolean whether to validate parameters against the schema at runtime",
                    "default": true,
                    "fa_icon": "fas fa-check-square",
                    "hidden": true
                },
                "pipelines_testdata_base_path": {
                    "type": "string",
                    "fa_icon": "far fa-check-circle",
                    "description": "Base URL or local path to location of pipeline test dataset files",
                    "default": "https://raw.githubusercontent.com/nf-core/test-datasets/",
                    "hidden": true
                },
                "trace_report_suffix": {
                    "type": "string",
                    "fa_icon": "far calendar",
                    "description": "Suffix to add to the trace report filename. Default is the date and time in the format yyyy-MM-dd_HH-mm-ss.",
                    "hidden": true
                },
                "workdir": {
                    "type": "string",
                    "description": "Working directory for saving dask logs or for intermediate labels zarr container."
                },
                "container_runtime_opts": {
                    "type": "string",
                    "description": "Global container options",
                    "hidden": true
                },
                "default_mem_gb_per_cpu": {
                    "type": "number",
                    "description": "Default memory for CPU core. This could be used to computed the required memory if only the CPUs are specified.",
                    "default": 15,
                    "hidden": true
                }
            }
        }
    },
    "allOf": [
        {
            "$ref": "#/$defs/input_output_options"
        },
        {
            "$ref": "#/$defs/institutional_config_options"
        },
        {
            "$ref": "#/$defs/segmentation_options"
        },
        {
            "$ref": "#/$defs/multiscale_options"
        },
        {
            "$ref": "#/$defs/distributed_processing_options"
        },
        {
            "$ref": "#/$defs/generic_options"
        }
    ]
}
