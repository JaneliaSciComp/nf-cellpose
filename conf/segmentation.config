params {
    cellpose_model           = 'cpsam'
    cellpose_models_dir      = "${projectDir}/work/cellpose-models"
    cellpose_log_config      = "${projectDir}/conf/log_config.ini"
    cellpose_cpus            = 1
    cellpose_mem_gb          = 0
    cellpose_runtime_opts    = ''
    cellpose_cluster_opts    = ''

    // data attributes important for segmentation
    z_axis                   = '1'
    channel_axis             = '0'
    anisotropy               = 1.0
    expansion_factor         = 1.0
    voxel_spacing            = ''
    timeindex                = 0
    input_channels           = '1'

    local_workers            = 1  // number of workers in a local cluster
    process_blocksize        = '128,128,128' // process block partition size
    blocks_overlap           = '' // blocks overlap - default to 10%
    gpu_device               = '' // which gpu device to use
    do_3D                    = true
    use_gpu                  = true
    skip_normalize           = false
    norm_percentile          = '1 99'
    stitch_threshold         = 0.0
    cellprob_threshold       = 1.0
    flow3D_smooth            = 1
    cell_diameter            = 0
    min_size                 = 15
    merge_labels_distance_th = 1
    preprocessing_steps      = ''
    preprocessing_config     = ''
    verbose                   = false

    skip_multiscale           = false
    multiscale_cpus           = 1
    multiscale_mem_gb         = 0

    // cluster params
    with_dask                = true
    dask_config              = "${projectDir}/conf/dask_config.yml"
    dask_workers             = 1
    dask_min_workers         = 1
    dask_worker_cpus         = 1
    dask_worker_mem_gb       = 0
    dask_scheduler_port      = 0
    dask_dashboard_port      = 0
    dask_worker_runtime_opts = ''
    dask_worker_cluster_opts = ''
}

process {

    withName: "(.*):SEGMENTATION:(.*)" {
        container = 'ghcr.io/janeliascicomp/cellpose:4.0.6-dask2025.5.1-py12'
        containerOptions = params.container_runtime_opts
        errorStrategy = 'terminate'
    }

    withName: "(.*):DASK_STARTMANAGER" {
        container = 'ghcr.io/janeliascicomp/cellpose:4.0.6-dask2025.5.1-py12'
        ext.args = [
            "--port ${params.dask_scheduler_port}",
            "--dashboard-address ${params.dask_dashboard_port}",
        ].join(' ')
    }

    withName: "(.*):DASK_STARTWORKER" {
        container = 'ghcr.io/janeliascicomp/cellpose:4.0.6-dask2025.5.1-py12'
        containerOptions = "${params.container_runtime_opts} ${params.dask_worker_runtime_opts}"
        clusterOptions = "${params.dask_worker_cluster_opts}"
        ext.args = [
            "--nthreads ${params.dask_worker_cpus}",
        ].join(' ')
    }

    withName: "(.*):CELLPOSE" {
        time = 24.h
        containerOptions = "${params.container_runtime_opts} ${params.cellpose_runtime_opts}"
        clusterOptions = "${params.cellpose_cluster_opts}"
        ext.args = [
            optional_arg_value('--process-blocksize', params.process_blocksize),
            optional_arg_value('--blocks-overlaps', params.blocks_overlap),
            optional_arg_value('--device', params.gpu_device),

            bool_arg('--do_3D', params.do_3D),
            bool_arg('--no_norm', params.skip_normalize),
            
            optional_arg_value('--z_axis', params.z_axis),
            optional_arg_value('--channel_axis', params.channel_axis),

            optional_arg_value('--input-channels', params.input_channels),

            optional_arg_value('--anisotropy', params.anisotropy),
            optional_arg_value('--expansion-factor', params.expansion_factor),
            optional_arg_value('--voxel-spacing', params.voxel_spacing),
            optional_arg_value('--timeindex', params.timeindex),
            optional_arg_value('--norm_percentile', params.norm_percentile),
            optional_arg_value('--stitch_threshold', params.stitch_threshold),
            optional_arg_value('--cellprob_threshold', params.cellprob_threshold),
            optional_arg_value('--flow3D_smooth', params.flow3D_smooth),
            optional_arg_value('--diameter', params.cell_diameter),
            optional_arg_value('--min_size', params.min_size),
            optional_arg_value('--label-distance-threshold', params.merge_labels_distance_th),

            optional_arg_value('--preprocessing-steps', params.preprocessing_steps),

            bool_arg('--use_gpu', params.use_gpu),

            optional_arg_value('--local-dask-workers', params.local_workers),
            optional_arg_value('--worker-cpus', params.dask_worker_cpus),

            bool_arg('--verbose', params.verbose),
        ].join(' ')
    }

}

def arg_value(arg_flag, arg_value) {
    "${arg_flag} ${arg_value}"
}

def bool_arg(arg_flag, arg_value) {
    arg_value ? "${arg_flag}" : ''
}

def optional_arg_value(arg_flag, arg_value) {
    arg_value ? "${arg_flag} ${arg_value}" : ''
}
